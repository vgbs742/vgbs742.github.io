---
//Astro stuff
import { Image } from 'astro:assets';

//components
import SectionTitle from "@components/snippets/SectionTitle.astro";

//i18n
import { getLangFromUrl, useTranslations } from '@/i18n/utils';
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

//small functions
import { formatDate } from '@/snippets/numberGames';

//collection functions
import { getSection } from '@/snippets/handleCollections';
import { render } from 'astro:content';

//assets
import fallbackImg from "@assets/for_content/img/fallback/ph.svg";

const { items: itemsRaw, collection, showDate, sectionTitle, sectionData, bothThin } = Astro.props;

var items = itemsRaw.filter(itemRaw => itemRaw.data.is_draft != true)

// Function to calculate `data-aos-duration` based on index
function calculateAosDuration(index) {
  return 1500 + index * 500; // Example: Increment duration by 500ms for each project
}

for (let i = 0; i < items.length; i++){
  const { Thumb } = await render(items[i]);
  ////////////////console.log("Thumb"); 
  ////////////////console.log(Thumb);
}

const matches1 = import.meta.glob('../../../**/*.mdx', { eager: true });
const posts1 = Object.values(matches1);
for(let i = 0; i < posts1.length; i++){
  ////////////////console.log("posts1[i].thumb");
  ////////////////console.log(posts1[i]);
}

for(let i = 0; i < items.length; i++){
  const singlePostForThumb = posts1.filter(post => 
    {
      const returnSmth = post.frontmatter.slug == items[i].data.slug;
      ////////////////console.log("post1: "+post.frontmatter.slug+" itemI: "+items[i].data.slug+" return: "+returnSmth);
      return post.frontmatter.slug == items[i].data.slug;
    }
  );
  ////////////////console.log("singlePostForThumb");
  ////////////////console.log(singlePostForThumb[0].thumb);
  if(singlePostForThumb[0].thumb){
    items[i]['thumb'] = singlePostForThumb[0].thumb;
  }else{
    items[i]['thumb'] = fallbackImg;
  }
}

//////////console.log("sectionData.data");
//////////console.log(sectionData.data.no_trans_excerpt);

////////////////console.log("items");
////////////////console.log(items);

---

<section class="bg-primary">
  <div class="px-8 2xl:max-w-7xl mx-auto py-3">
    <div class="space-y-2">
      <!-- Section Title and Decorative Elements -->
      {sectionTitle == "true" && <SectionTitle thin={sectionData.data.name.thin} thick={sectionData.data.name.thick} linkUrl={sectionData.data.slug} linkText={sectionData.data.seeAll} bothThin={bothThin} />}
    </div>
    <div>
      <slot />
    </div>
    <ul
      class="mx-auto grid grid-cols-1  sm:grid-cols-2 text-secondary md:grid-cols-3 lg:grid-cols-4 items-start gap-6 mt-2 pt-2"
      role="list"
    >
      {
        items.map((item, index) => (
          <li
            class="flow-root h-full"
            data-aos="fade-up"
            data-aos-duration={calculateAosDuration(index)}
          >
            <div class="h-full">
              <div class="h-full flex flex-col justify-between">
                <div class="grow">
                  <div class="my-2 grid grid-cols-1 grid-rows-1 canvas">
                    <div class="h-40 col-start-1 row-start-1 overflow-clip img" style={"background: url("+item.thumb.src+");background-size: cover;background-position: center;"}>
                    </div>
                    <div class="h-40 col-start-1 row-start-1 z-10 over"></div>
                  </div>
                  <h3 class="italic text-2xl block font-bold">{item.data.headline}</h3>
                  {((item.data.date_published || item.data.author) && showDate == "true") && <div class="text-sm mt-1 font-light italic"><span>{formatDate(item.data.date_published)}</span>  <span>{/*item.author*/}</span></div>} 
                  <p class="text-base mt-1.5 leading-relaxed">
                    {item.data.is_trans_ready && item.data.excerpt}
                    {!item.data.is_trans_ready && sectionData.data.no_trans_excerpt}
                  </p>
                </div>
                <div class="mt-2">
                  <a href={"/"+lang+"/"+sectionData.data.slug+"/"+item.data.slug} class="mt-3 text-base font-semibold">
                    {sectionData.data.readIt} &nbsp; â†—
                  </a>
                </div>
              </div>
            </div>
          </li>
        ))
      }
    </ul>
  </div>
</section>

<style>

:root{
  --dot-size: 0.151em;  
  --line-color: #333;       
  --line-contrast: 123%;    
  --photo-brightness: 88%;  
  --photo-contrast: 171%;   
  --photo-blur: 0.234px;        
  --blend-mode: hard-light; 

  --make-color: saturate(100%) invert(7%) sepia(100%) saturate(4848%) hue-rotate(222deg) brightness(95%) contrast(171%);
}

.canvas {
  /*position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;*/
  filter: contrast(var(--line-contrast));
  overflow: hidden;
}

.canvas .over {
  /*backdrop-filter: var(--make-color);*/
}

.canvas::before {
  content: '';
  position: absolute;
  top: -50%;
  left: -50%;
  bottom: -50%;
  right: -50%;
  background: radial-gradient(circle at center, var(--line-color), #fff);
  background-size: var(--dot-size) var(--dot-size);
  transform: rotate(20deg);
}

.canvas .img {
  /*position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;*/
  object-fit: cover;
  object-position: center;
  mix-blend-mode: var(--blend-mode);
  filter: grayscale(1) brightness(var(--photo-brightness)) contrast(var(--photo-contrast)) blur(var(--photo-blur)) var(--make-color);
}
</style>