---
import { getCollection, getEntry, render } from 'astro:content';

import { getTranslations, getItemLang, getPageUrl } from '@/snippets/handleCollections';

import { formatDate } from '@/snippets/numberGames';

import BaseLayout from "@layouts/BaseLayout.astro";
import TopArea from "@components/general/TopArea.astro";
import Intro from "@components/general/Intro.astro";
import Numbered from "@components/general/Numbered.astro";
import ArticlesNude from "@components/general/ArticlesNude.astro";
import ArticlesImaged from "@components/general/ArticlesImaged.astro";
import divTitle from "@components/snippets/divTitle.astro";
import SectionTitle from '@/components/snippets/SectionTitle.astro';
import TwoThings from '@/components/snippets/TwoThings.astro';


const lB = await getCollection('lilBits');

const tArt = lB.filter(entry => {
	//////////console.log("entry");
	//////////console.log(entry.id);
	return entry.id == "article";
})[0].data;

//////console.log("tArt");
//////console.log(tArt);

const { lang, slug, page, pages } = Astro.props;

//////////////////console.log("");
//////////////////console.log("TEST:ASTRO");
//////////////////console.log("page");
//////////////////console.log(page);
//////////////////console.log("slug");
//////////////////console.log(slug);
//////////////////console.log("lang");
//////////////////console.log(lang);
//////////////////console.log("pages");
//////////////////console.log(pages);

////////////////////console.log("page.filePath");
////////////////////console.log(page.filePath);
////////////////////console.log("");

////////////////////console.log("page.filePath?.split('/')[page.filePath?.split('/').length - 1]");
////////////////////console.log(page.filePath?.split('/')[page.filePath?.split('/').length - 1]);
//const translations = pages.filter(onePage => onePage.filePath?.split('/')[onePage.filePath?.split('/').length - 1] == page.filePath?.split('/')[page.filePath?.split('/').length - 1])
var translations = getTranslations(page, pages);
translations = translations.filter(translation => translation.data.is_trans_ready == true);

////////////////////console.log(" ");
////////////////////console.log("pages");
////////////////////console.log(pages);
////////////////////console.log(" ");
//////////////////console.log("translations");
//////////////////console.log(translations);

const peops = await getCollection('people');
const sections = await getCollection('sections');

const noTranslation = await getEntry('lilBits', 'noTranslation');
////////console.log("noTranslation, lang "+lang);
////////console.log(noTranslation.data.excuse.title[lang]);
////////////////////console.log("people");
////////////////////console.log(peops);

////////////////////console.log("");

const formattedDate = page.data.date_published.toLocaleString(lang);

////////////////console.log("page");
////////////////console.log(page);

const { Content } = await render(page);

//////console.log("page.data.author");
//////console.log(page.data.author);

var authorString = "";
for(let i = 0; i < page.data.author.length; i++){
  const thisAuth = peops.filter(person => person.id == page.data.author[i].id);
  //////console.log("thisAuth");
  //////console.log(thisAuth[0].data);
  authorString += thisAuth[0].data.name_first + " " + thisAuth[0].data.name_last;
  if(i < page.data.author.length - 1){
    authorString += ", ";
  }
}
//////console.log("authorString");
//////console.log(authorString);

var dateString = "";

if(page.data.date_published){
  dateString += tArt.published[lang];
  dateString += " ";
  dateString += formatDate(page.data.date_published);
  
  //dateString += page.data.date_published;
}
if(page.data.date_updated){
  dateString += ", ";
  dateString += tArt.updated[lang];
  dateString += " ";
  dateString += formatDate(page.data.date_updated);
}
const keywords = page.data.keywords;

//console.log("keywords");
//console.log(page.data);

////console.log("titleH: "+ page.data.title);

---


<BaseLayout author={authorString} datePub={page.data.date_published} dateUp={page.data.date_updated} keywords={keywords} title={page.data.title} excerpt={page.data.excerpt} lang={lang} >
  <TopArea />

  <article class="bg-primary flex flex-col justify-center place-self-center text-justify">
    <div class="px-8 2xl:max-w-7xl mx-auto py-8 w-full">
      <div class="space-y-1 max-w-3xl mx-auto">
        <!-- div Title and Decorative Elements -->
        <h1 class="text-5xl">
          {page.data.headline}
        </h1>
        <h2 class="text-xl font-semibold italic">
          {page.data.drophead}
        </h2>
      </div>
      <div class="max-w-3xl mx-auto mt-1 italic">
        {page.data.lead}
      </div>
      <div class="max-w-3xl mx-auto">
        <div class="text-left">
          {<TwoThings left={dateString} right={authorString}/>}
        </div>
        {page.data.is_trans_ready && <Content />}
        {!page.data.is_trans_ready && 
          <h3>{noTranslation.data.excuse.title[lang]}</h3>
          <p>{noTranslation.data.excuse.text[lang]}</p>
          <h4>{noTranslation.data.excuse.announceOthers[lang]}</h4>
          <ul>
            {translations.map((translation, index) => (
                <li key={index}>
                  <a class="font-bold" href={getPageUrl(translation, sections)}>{getItemLang(translation)['full']}  &nbsp; â†—</a>
                </li>
              ))
            }
          </ul>
        }
      </div>
    </div>
  </article>

  <div class="h-12 max-w-3xl mx-auto">
  </div>

</BaseLayout>

