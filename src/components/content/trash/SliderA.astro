---
import { Image } from 'astro:assets';

interface ImageData {
  id: number;
  documentId: string;
  url: string;
  alternativeText: string;
  name: string;
  width: number;
  height: number;
}

interface Props {
  files: ImageData[];
  interval?: number;
  index?: number;
}

const { files, interval = 5000, index } = Astro.props;
const STRAPI_BASE_URL = import.meta.env.STRAPI_BASE_URL || "http://localhost:1337";
const sliderId = `slider-${Math.random().toString(36).substr(2, 9)}`;

const indexArray = Array.from(Array(index).keys());

////////////////////console.log(indexArray);
////////////////////console.log("indexArray");
---

<div class="custom-slider relative w-full h-96 overflow-hidden rounded-xl shadow-lg my-8" id={sliderId}>
  <slot/>
  
  <!-- Navigation buttons -->
  <button class="absolute top-1/2 left-4 transform -translate-y-1/2 bg-white bg-opacity-75 hover:bg-opacity-100 text-gray-800 rounded-full p-3 shadow-md transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-blue-400" data-slider-prev>
    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
    </svg>
  </button>
  <button class="absolute top-1/2 right-4 transform -translate-y-1/2 bg-white bg-opacity-75 hover:bg-opacity-100 text-gray-800 rounded-full p-3 shadow-md transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-blue-400" data-slider-next>
    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
    </svg>
  </button>
  
  <!-- Slide indicators -->
  <div class="absolute bottom-6 left-1/2 transform -translate-x-1/2 flex space-x-3">
    {indexArray.map((_, index) => (
      <button class="w-3 h-3 rounded-full bg-white bg-opacity-50 hover:bg-opacity-100 transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-blue-400" data-slider-indicator data-index={index}></button>
    ))}
  </div>
</div>

<script define:vars={{ interval, sliderId }}>
  const sliderContainer = document.getElementById(sliderId);
  const slides = sliderContainer.querySelectorAll('[data-slider-image]');
  const prevButton = sliderContainer.querySelector('[data-slider-prev]');
  const nextButton = sliderContainer.querySelector('[data-slider-next]');
  const indicators = sliderContainer.querySelectorAll('[data-slider-indicator]');
  let currentSlide = 0;
  let intervalId;

  function showSlide(index) {
    slides[currentSlide].classList.remove('opacity-100');
    slides[currentSlide].classList.add('opacity-0');
    indicators[currentSlide].classList.remove('bg-opacity-100');
    indicators[currentSlide].classList.add('bg-opacity-50');
    
    currentSlide = index;
    
    slides[currentSlide].classList.remove('opacity-0');
    slides[currentSlide].classList.add('opacity-100');
    indicators[currentSlide].classList.remove('bg-opacity-50');
    indicators[currentSlide].classList.add('bg-opacity-100');
  }

  function nextSlide() {
    showSlide((currentSlide + 1) % slides.length);
  }

  function prevSlide() {
    showSlide((currentSlide - 1 + slides.length) % slides.length);
  }

  function startAutoslide() {
    intervalId = setInterval(nextSlide, interval);
  }

  function stopAutoSlide() {
    clearInterval(intervalId);
  }

  showSlide(0);
  //startAutoslide();

  prevButton.addEventListener('click', () => {
    prevSlide();
    stopAutoSlide();
    //startAutoslide();
  });

  nextButton.addEventListener('click', () => {
    nextSlide();
    stopAutoSlide();
    //startAutoslide();
  });

  indicators.forEach((indicator, index) => {
    indicator.addEventListener('click', () => {
      showSlide(index);
      stopAutoSlide();
      //startAutoslide();
    });
  });

  sliderContainer.addEventListener('mouseenter', stopAutoSlide);
  sliderContainer.addEventListener('mouseleave', startAutoslide);
</script>

