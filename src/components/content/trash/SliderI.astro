---
import { Image } from 'astro:assets';

//////////////////////////console.log("uiWidthUL");
//////////////////////////console.log(uiWidthUL);


interface ImageData {
  id: number;
  documentId: string;
  url: string;
  alternativeText: string;
  name: string;
  width: number;
  height: number;
}

interface SingleImage {
  id: number;
  caption: string;
  alt: string;
  image: ImageData;
}

interface Props {
  singleimage: SingleImage[];
  interval?: number;
  tailwind?: string;
  bgcolor?: string;
  index: number;
}


const { singleimage, interval = 5000, tailwind="h-96", bgcolor, index} = Astro.props;
const STRAPI_BASE_URL = import.meta.env.STRAPI_BASE_URL || "http://localhost:1337";
const sliderId = `slider-${Math.random().toString(36).substr(2, 9)}`;



const indexArray = Array.from(Array(parseInt(index)).keys());
//////////////////console.log("indexArray");
//////////////////console.log(indexArray);

//////////////////////////console.log("bgcolor");
//////////////////////////console.log(bgcolor);


////////////////////////////console.log("singleimage");
////////////////////////////console.log(singleimage);
////////////////////////////console.log("singleimage-l");
////////////////////////////console.log(singleimage.length);

//navigation only when there are more than 1 image
var navButtons = "";
var navIndicators = "";


---


<div class="hidden"></div>
<div class="hidden aspect-square"></div>
<div class="hidden aspect-4/3"></div>
<div class="hidden aspect-3/4"></div>
<div class="hidden aspect-3/2"></div>
<div class="hidden aspect-2/3"></div>
<div class="hidden aspect-16/9"></div>
<div class="hidden aspect-9/16"></div>
<div class="hidden max-h-0"></div>
<div class="hidden scale-y-0"></div>
<div class="hidden" id="bgcolor">{bgcolor}</div>


<div class={"h-80 flex flex-col custom-slider relative w-full overflow-hidden rounded-xl shadow-lg my-3 bg-slate-800"} id={sliderId}>
  
	<slot />

  
  
  <!-- Navigation buttons -->
  <button class="absolute top-1/2 left-4 transform -translate-y-1/2 bg-neutral-light bg-opacity-75 hover:bg-opacity-100 all-neutral-dark rounded-full p-3 shadow-md transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-focus" data-slider-prev>
    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
    </svg>
  </button>
  <button class="absolute top-1/2 right-4 transform -translate-y-1/2 bg-neutral-light bg-opacity-75 hover:bg-opacity-100 all-neutral-dark rounded-full p-3 shadow-md transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-focus" data-slider-next>
    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
    </svg>
  </button>
  
  <!-- indicators -->
  <div class="flex flex-col flex-wrap absolute bottom-0 w-full transition-all duration-150 ease">
    <!-- Slide indicators -->
    <div class="mx-auto my-2 flex space-x-3 z-10 w-full justify-center">
      {indexArray.map((_, index) => (
        <button class="w-3 h-3 rounded-full bg-neutral-light bg-opacity-50 hover:bg-opacity-100 transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-focus" style="z-index: 0;" data-slider-indicator data-index={index}></button>
      ))}
    </div>
    <!-- caption -->
    <!-- <div class="caption grid text-sm w-full z-10 h-fit transition-all duration-50 ease-in-out p-3" caption-outer-container>
      <div class="grid grid-cols-1 grid-rows-1 rounded-md bg-neutral-light transition-all duration-500 ease-in-out h-fit" caption-inner-container>
        {singleimage.map((thisImage, index) => (
          <div class="invisible transition-all ease-in-out duration-300 delay-0 opacity-0 mx-0 mb-0 order-1 px-4 h-0 max-h-8 [grid-area: 1/1/1/1] text-neutral-dark" data-index={index}>{thisImage.caption}</div>
        ))}
      </div>
    </div> -->
  </div>
</div>

<div class="captionMobile text-sm grid w-full z-10 h-fit transition-all duration-50 ease-in-out py-3 -my-3" caption-outer-container-mobile>
  <div class="grid grid-cols-1 grid-rows-1 rounded-md bg-neutral-light transition-all duration-500 ease-in-out h-fit" caption-inner-container-mobile>
    {indexArray.map((thisImage, index) => (
      <div class="invisible overflow-hidden transition-all ease-in-out duration-300 delay-0 opacity-0 mx-0 mb-0 order-1 px-4 h-0 max-h-8 [grid-area: 1/1/1/1] text-neutral-dark" data-index={index}>{thisImage.caption}</div>
    ))}
  </div>
</div>

<script>
  

  //medium zoom is the zoom library.
  import mediumZoom from 'medium-zoom';
  //const bg = await "#"+document.getElementById("bgcolor").innerHTML;
  //////////////////////////console.log("bg: "+bg);
  const zoom = await mediumZoom('.medium-zoomable', {
    margin: 0,
    /*opacity: "0.5",*/
    /*isTailWind: false,
    background: bg+"70",
    bgfilter: "blur(3px)",*/
  });

  const prevButtonsAll = document.querySelectorAll('[data-slider-prev]');
  const nextButtonsAll = document.querySelectorAll('[data-slider-next]');
  const indicatorsAll = document.querySelectorAll('[data-slider-indicator]');
  const captionOutersAll = document.querySelectorAll('[caption-outer-container]');
  const customSlidersAll = document.querySelectorAll('.custom-slider');
  


  zoom.on('open', event => {
    // track when the image is zoomed
    ////////////////////////////console.log("open");
    prevButtonsAll.forEach(node => {
      node.classList.add('opacity-0');
      node.classList.add('invisible');
    });
    nextButtonsAll.forEach(node => {
      node.classList.add('opacity-0');
      node.classList.add('invisible');
    });
    indicatorsAll.forEach(node => {
      node.classList.add('opacity-0');
      node.classList.add('invisible');
    });
    captionOutersAll.forEach(node => {
      node.classList.add('opacity-0');
      node.classList.add('invisible');
      node.classList.add('scale-y-0');
      node.classList.add('translate-y-full');
    });
    customSlidersAll.forEach(node => {
      node.classList.remove('bg-slate-800');
      node.classList.remove('shadow-lg');
    });
  })

  zoom.on('closed', event => {
    // track when the image has finished closing
    ////////////////////////////console.log("closed");
    prevButtonsAll.forEach(node => {
      node.classList.remove('opacity-0');
      node.classList.remove('invisible');
    });
    nextButtonsAll.forEach(node => {
      node.classList.remove('opacity-0');
      node.classList.remove('invisible');
    });
    indicatorsAll.forEach(node => {
      node.classList.remove('opacity-0');
      node.classList.remove('invisible');
    });
    captionOutersAll.forEach(node => {
      node.classList.remove('opacity-0');
      node.classList.remove('invisible');
      node.classList.remove('scale-y-0');
      node.classList.remove('translate-y-full');
    });
    customSlidersAll.forEach(node => {
      node.classList.add('bg-slate-800');
      node.classList.add('shadow-lg');
    });
  })

</script>

<script define:vars={{ interval, sliderId, singleimage, bgcolor }}>
  const sliderContainer = document.getElementById(sliderId);
  const slides = sliderContainer.querySelectorAll('[data-slider-container]');
  const prevButton = sliderContainer.querySelector('[data-slider-prev]');
  const nextButton = sliderContainer.querySelector('[data-slider-next]');
  const indicators = sliderContainer.querySelectorAll('[data-slider-indicator]');
  const captionInner = sliderContainer.querySelectorAll('[caption-inner-container]');
  const captionOuter = sliderContainer.querySelectorAll('[caption-outer-container]');
  const captionInnerMobile = document.querySelectorAll('[caption-inner-container-mobile]');
  const captionOuterMobile = document.querySelectorAll('[caption-outer-container-mobile]');
  let currentSlide = 0;
  let intervalId;

  function showSlide(index) {
    slides[currentSlide].classList.remove('opacity-100');
    slides[currentSlide].classList.add('opacity-0');
    slides[currentSlide].classList.add('invisible');
    indicators[currentSlide].classList.remove('bg-opacity-100');
    indicators[currentSlide].classList.add('bg-opacity-50');

    captionInner[0].children[currentSlide].classList.add("invisible");
    captionInner[0].children[currentSlide].classList.remove("flex");
    captionInner[0].children[currentSlide].classList.add("opacity-0");
    captionInner[0].children[currentSlide].classList.remove("opacity-100");
    captionInner[0].children[currentSlide].classList.remove("max-h-96");
    captionInner[0].children[currentSlide].classList.add("h-0");
    captionInner[0].children[currentSlide].classList.remove("h-fit");
    captionInner[0].children[currentSlide].classList.add("max-h-8");
    captionInner[0].children[currentSlide].classList.remove("py-3");

    captionInnerMobile[0].children[currentSlide].classList.add("invisible");
    captionInnerMobile[0].children[currentSlide].classList.remove("flex");
    captionInnerMobile[0].children[currentSlide].classList.add("opacity-0");
    captionInnerMobile[0].children[currentSlide].classList.remove("opacity-100");
    captionInnerMobile[0].children[currentSlide].classList.remove("max-h-96");
    captionInnerMobile[0].children[currentSlide].classList.add("h-0");
    captionInnerMobile[0].children[currentSlide].classList.remove("h-fit");
    captionInnerMobile[0].children[currentSlide].classList.add("max-h-8");
    captionInnerMobile[0].children[currentSlide].classList.remove("py-3");

    currentSlide = index;
    
    slides[currentSlide].classList.remove('opacity-0');
    slides[currentSlide].classList.add('opacity-100');
    slides[currentSlide].classList.remove('invisible');
    indicators[currentSlide].classList.remove('bg-opacity-50');
    indicators[currentSlide].classList.add('bg-opacity-100');

    captionInner[0].children[currentSlide].classList.remove("invisible");
    captionInner[0].children[currentSlide].classList.add("flex");
    captionInner[0].children[currentSlide].classList.remove("opacity-0");
    captionInner[0].children[currentSlide].classList.add("opacity-100");
    captionInner[0].children[currentSlide].classList.add("max-h-96");
    captionInner[0].children[currentSlide].classList.remove("h-0");
    captionInner[0].children[currentSlide].classList.add("h-fit");
    captionInner[0].children[currentSlide].classList.remove("max-h-8");
    captionInner[0].children[currentSlide].classList.add("py-3");

    captionInnerMobile[0].children[currentSlide].classList.remove("invisible");
    captionInnerMobile[0].children[currentSlide].classList.add("flex");
    captionInnerMobile[0].children[currentSlide].classList.remove("opacity-0");
    captionInnerMobile[0].children[currentSlide].classList.add("opacity-100");
    captionInnerMobile[0].children[currentSlide].classList.add("max-h-96");
    captionInnerMobile[0].children[currentSlide].classList.remove("h-0");
    captionInnerMobile[0].children[currentSlide].classList.add("h-fit");
    captionInnerMobile[0].children[currentSlide].classList.remove("max-h-8");
    captionInnerMobile[0].children[currentSlide].classList.add("py-3");

    singleimage[currentSlide].caption == null && captionInner[0].children[currentSlide].classList.remove("py-3");
    //singleimage[currentSlide].caption == null && captionInnerMobile[0].children[currentSlide].classList.remove("py-3");

    singleimage.length < 2 && hideNavUI();
  }

  function hideNavUI(){
    indicators[0].classList.add('hidden');
    prevButton.classList.add('hidden');
    nextButton.classList.add('hidden');
  }

  function nextSlide() {
    showSlide((currentSlide + 1) % slides.length);
  }

  function prevSlide() {
    showSlide((currentSlide - 1 + slides.length) % slides.length);
  }

  function startAutoslide() {
    intervalId = setInterval(nextSlide, interval);
  }

  function stopAutoSlide() {
    clearInterval(intervalId);
  }

  showSlide(0);
  //startAutoslide();

  prevButton.addEventListener('click', () => {
    prevSlide();
    stopAutoSlide();
    //startAutoslide();
  });

  nextButton.addEventListener('click', () => {
    nextSlide();
    stopAutoSlide();
    //startAutoslide();
  });

  indicators.forEach((indicator, index) => {
    indicator.addEventListener('click', () => {
      showSlide(index);
      stopAutoSlide();
      //startAutoslide();
    });
  });

  sliderContainer.addEventListener('mouseenter', stopAutoSlide);
  //sliderContainer.addEventListener('mouseleave', startAutoslide);
</script>

<style>
  .medium-zoom-overlay{z-index:5;backdrop-filter: blur(3px);position:fixed;top:0;right:0;bottom:0;left:0;opacity:0;transition:opacity .3s;will-change:opacity}.medium-zoom--opened .medium-zoom-overlay{z-index: 99;cursor:pointer;cursor:zoom-out;opacity:1}.medium-zoom-image{cursor:pointer;cursor:zoom-in;transition:transform .3s cubic-bezier(.2,0,.2,1)!important}.medium-zoom-image--hidden{visibility:hidden}.medium-zoom-image--opened{z-index:101;position:relative;cursor:pointer;cursor:zoom-out;will-change:transform}

  @media screen and (min-width: 768px) {
    .caption {
      display: relative;
    }
    .captionMobile {
      display: none;
    }
  }
  @media screen and (max-width: 768px) {
    .caption {
      display: none;
    }
    .captionMobile {
      display: relative;
    }
  }


</style>